#include <Wire.h>
#include <SoftwareSerial.h>
#include "RTClib.h"
#include <EEPROM.h>
/* ============================================
EEPROM memory : 1024 bytes.
  sector1014: the last 10 bytes are reserved ex:
    1023: total count of entries.
    1022: isFirstTime firstTime usage indicator. ??
    1021&1020: switch id 0-255 ex: 1255, 222108, 13 Id of a switch is consist 2 bytes. binding between switch and phone.
    //isDebug.?
    1019&1018: this the code to compare entries between the two.
			ex: rx_Data = "E:245,18:C"
				head: E
				body: 245,18
				Tail: C : compare, U : update means add/update entry comparing key.

    1017,1016 : pre-set period of time of active of a particular outlet when using a button. we have 2 outlet(minutes: 255 max)

  sector0000-1013: the 1014 bytes are for entry storage.


Communication protocol:
  head = A : sync entries; + check time
  head = B : sync current time;
  head = C : check time;
  head = D : Debug mode: show on the phone data going in and out.
  head = E : compare entries between switch and phone. tail could be: 'C' or 'U'.
  head = F : reset: delete all entries, isFirstTime.
  head = G : check all = C+E
  head = H : check if entries are sycned or not?
         I : regain the entries from switch to phone.
		 J : setting pre-set period of time

  r: response
  Head = rA : response from Sync Entry command. success or fail. if fail, do it again.
  Head = rB : response from Sync Time command. success or fail. if fail, do it again.
  head = rC : response from Check Time command. ok or not
  Head = rD : response from Comparation command. success or fail. if fail, do it again.
  Head = rE : response from check all command.success or fail. if fail, do it again.
  Head = rF : response from Reset command .success or fail. if fail, do it again.

  tail = O : One
  tail = F : First
  tail = M : Middle
  tail = L : Last

Entry
  info'no second' = 14x20 = 280(14byte/entry, we have 1014byte storage.)
  info'with second' = 15x20 = 300(15byte/entry, we have 1014byte storage.)

  ex: app send 3 entry to switch, it will send 3 times, 1 entry each time with 1500ms in between.
  command Sync.
  rx_Data 1 = "A:6,18,0,0,18,30,0,||1,1,1,1,1,1,1,||1,1,1,1,1,1,1,1,1,1,1,1:F"
  rx_Data 2 = "A:6,8,5,0,8,8,0,||1,1,1,1,1,1,1,||1,1,1,1,1,1,1,1,1,1,1,1:M"
  rx_Data 3 = "A:7,20,10,10,20,30,30,||1,1,1,1,1,1,1,||1,1,1,1,1,1,1,1,1,1,1,1:L"
  Command Sync Real Time.
  rx_Data 4 = "B:2014,10,15,18,30,0:O"
  command Check Time.
  rx_Data 5 = "C:2016,13:O"
  tx_Data 5a= "rC:ok:0" (r: response)
  tx_Data 5b= "rC:1,1,2001,0,0,0:O"
  command pre-set period of time for button
  rx_Data   = "E:245,18:C"
  rx_Data   = "E:111,130:U"

  ":" : delimeter between parts in rawData;
  part 1 : head ex : A, B or C
  part 2 : body ex : 6,8,5,0,8,8,0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1,1,1(entry) or 2014,10,15,18,30,0(time)
  part 3 : tail ex : F,M,L,O to tell if the entry in rxdata is First, Middle, Last, One;
===============================================
*/
typedef struct{
  byte relayID;
  byte start_hr; byte start_mn; byte start_se;
  byte end_hr; byte end_mn; byte end_se;
  boolean week[7];
  boolean month[12];
 }  EntryObject;

int addr = 0;
byte cnt = 0;// number of entry

String rx_data ; //incoming data from bT connection. len = 3?
//String entry; //
//String entry_str = "";

EntryObject enlist[30];//6 entries x 4 outlet
DateTime now;
SoftwareSerial mySerial(3, 4);// RX = pin D3, TX = pin D4
RTC_DS1307 rtc;

void setup() {
  // put your setup code here, to run once:
  // initialize timer1
  noInterrupts();           // disable all interrupts
  TCCR1A = 0;
  TCCR1B = 0;
  TCNT1  = 0;

  OCR1A = 31250;            // compare match register 16MHz/256/2Hz
  TCCR1B |= (1 << WGM12);   // CTC mode
  TCCR1B |= (1 << CS12);    // 256 prescaler
  TIMSK1 |= (1 << OCIE1A);  // enable timer compare interrupt
  interrupts();             // enable all interrupts

  Serial.begin(9600);
  mySerial.begin(9600);

  #ifdef AVR
  Wire.begin();
  #else
  Wire1.begin(); // Shield I2C pins connect to alt I2C bus on Arduino Due
  #endif
  rtc.begin();


  //EEPROM.write(1023, 2);
  loadEntry();
}

const byte r1 = 6;
const byte r2 = 7;
const byte r3 = 8;
const byte r4 = 9;
const byte b1 = 10; // the number of the pushbutton pin: D10
const byte b2 = 11;
const byte b3 = 12;
const byte b4 = 13;

class ButtonController
{
  byte relayPin;
  byte buttonPin;
  boolean buttonState;
  boolean lastButtonState;

  public:
  ButtonController(byte bPin, byte rPin){
      buttonPin = bPin;
      relayPin = rPin;
      pinMode(buttonPin,INPUT_PULLUP);
      pinMode(relayPin,OUTPUT);
      digitalWrite(relayPin,LOW);
      buttonState = 0;
      lastButtonState = 0;
  }

  void doAction(){
      buttonState = digitalRead(buttonPin);
      // check if the pushbutton is pressed.
      if(lastButtonState != buttonState){
        digitalWrite(relayPin,digitalRead(relayPin) ^ 1);
        Serial.print(F("button: "));
        Serial.println(buttonPin);
        Serial.print(F("button state: "));
        Serial.println(digitalRead(buttonPin));
      }
      lastButtonState = buttonState;
  }
};

ButtonController bt1(b1,r1);// the number of relay pin : D6 and pushbutton pin: D10
ButtonController bt2(b2,r2);
//ButtonController b3(b3,r3);
//ButtonController b4(b4,r4);


void loop() {
///////button handler
  bt1.doAction();
  bt2.doAction();

//////listen incoming data from a phone.
  if(mySerial.available() > 0) {
	  noInterrupts();
      rx_data = mySerial.readStringUntil('\n');  //store data received
      protocolFactory(rx_data);
	  interrupts();
  }// endif myserial , reading from BT


}//end the big loop()

ISR(TIMER1_COMPA_vect) // timer compare interrupt service routine
{
////////where the ON_OFF thing happen////////
/////////////////////////////////////////////
  if(cnt > 0){
	now = rtc.now();
    byte weekday = now.dayOfTheWeek();//now.dayOfWeek();
	byte cur_mon = now.month();
	long now_time = now.hour()*60*60 + now.minute()*60 + now.second();

    Serial.print( F("weekday :"));
    Serial.println( weekday );
    for(byte i =0; i < cnt; i++){
		long start_time = enlist[i].start_hr*60*60 + enlist[i].start_mn*60 + + enlist[i].start_se;
		long end_time = enlist[i].end_hr*60*60 + enlist[i].end_mn*60 + enlist[i].end_se;
		for(byte k = 0; k <= 11; k++){
			if(enlist[i].month[k] == 1 && cur_mon == k+1){
				for(byte y = 0; y <= 6; y++){
					if(enlist[i].week[y] == 1 && weekday == y ){
					 action(now_time,start_time, 1,enlist[i].relayID);
					 action(now_time,end_time, 0,enlist[i].relayID);
					}
				}
			}
		}
    }
  }//end if(cnt > 0)
//"the ON_OFF thing"
}

int freeRam(){
	extern int __heap_start, *__brkval;
	int v;
	return (int) &v - (__brkval == 0 ? (int) &__heap_start : (int) __brkval);
}

int saveEntry(int init_addr, byte container[], boolean week[], boolean month[]){
	EntryObject entry = {
	container[0],//relayID
	container[1],container[2],container[3],//start time
	container[4],container[5],container[6],//end time
	week,month
	};

	EEPROM.put(init_addr, entry);
	init_addr += sizeof(entry);
	return init_addr;
}

void protocolFactory(String rx_data){
	String head = getValue(rx_data, ':', 0);
	String body = getValue(rx_data, ':', 1);
	String tail = getValue(rx_data, ':', 2);
	Serial.print(F("head: "));
	Serial.println(head);
	Serial.print(F("body: "));
	Serial.println(body);
	Serial.print(F("tail: "));
	Serial.println(tail);

	//// check RTC on arduino
	if(head == "C"){
		int yr_client;
		yr_client =getValue(body, ',', 0).toInt();
		now = rtc.now();
		int yr = now.year();
		//    Serial.print(F("yr: "));
		//    Serial.println(yr);
		//    Serial.print(F("yr_client: "));
		//    Serial.println(yr_client;
		if(yr == yr_client){
		  mySerial.println(F("rC:ok:O"));
		}else{
		  byte mon = now.month();
		  byte date= now.day();
		  byte hr  = now.hour();
		  byte mn  = now.minute();
		  byte sec = now.second();
		  String time_str = "rC:"+String(date)+','+String(mon)+','+String(yr_client)+','+String(hr)+','+String(mn)+','+String(sec)+":O";
		  mySerial.println(time_str);
		  //      Serial.print(F("time_str: "));
		  //      Serial.println(time_str);
		  //      Serial.print(F("mon: "));
		  //      Serial.println(mon);
		}
	}// endif  check Time : C

	/////sync time
	if(head == "B"){
		int ti[6];
		for(byte i =0; i <=5 ; i++){
		  ti[i] =getValue(body, ',', i).toInt();
		}
		rtc.adjust(DateTime(ti[0], ti[1], ti[2], ti[3], ti[4], ti[5]));
	}//endif sync time : B

	////// sync entries
	if(head == "A"){
		cnt++;
		if(tail == "F" || tail == "O"){
		  addr = 0;
		  cnt=1;
		}

		byte holder[7];
		for(byte x =0; x <= 6; x++){
		  holder[x] =getValue(body, ',', x).toInt();
		}

		boolean week[7];
		for(byte y =0; y <= 6; y++){
		  week[y] =getValue(body, ',', y+7).toInt();
		}

		boolean month[12];
		for(byte z =0; z <= 11; z++){
		  month[z] =getValue(body, ',', z+14).toInt();
		}
		addr = saveEntry(addr,holder, week, month);
		if(tail == "L" || tail == "O"){
		  EEPROM.write(1023, cnt);
		  loadEntry();
		}
	}// endif sync entry : A

	//compare entries between switch and phone.
	if(head == "E"){
		byte pKey1 =getValue(body, ',', 0).toInt();
		byte pKey2 =getValue(body, ',', 1).toInt();
		if(tail == "C"){//compare
			byte sKey1 = EEPROM.read(1018);
			byte sKey2 = EEPROM.read(1019);
			if(sKey1 == pKey1 && sKey2 == pKey2){
				mySerial.println("rE:1:C");
			}else{
				mySerial.println("rE:0:C");
			}
		}
		if(tail == "U"){// update
			EEPROM.write(1018, pKey1);
			EEPROM.write(1019, pKey2);
			mySerial.println("rE:1:U");
		}
	}
	//1015,1014 setting pre-set period of time.
	if(head == "J"){
		byte rx_t1 =getValue(body, ',', 0).toInt();
		byte rx_t2 =getValue(body, ',', 1).toInt();
		EEPROM.write(1015, rx_t1);
		EEPROM.write(1016, rx_t2);
	}

}

void action(long now_time, long act_time, boolean action, byte relayID){
  //  Serial.println("in if1: ");
  //  Serial.print("now_time: ");
  //  Serial.println(now_time);
  if(now_time == act_time){
      if(digitalRead(relayID) != action){
          digitalWrite(relayID,action);
      }
      //Serial.println(F("in if2"));
  }
}

String getValue(String data, char separator, byte index){
	byte found = 0;
	byte strIndex[] = {0, -1};
	byte maxIndex = data.length()-1;
	for(byte i=0; i<=maxIndex && found<=index; i++){
	if(data.charAt(i)==separator || i==maxIndex){
		found++;
		strIndex[0] = strIndex[1]+1;
		strIndex[1] = (i == maxIndex) ? i+1 : i;
	}
	}
	return found > index ? data.substring(strIndex[0], strIndex[1]) : "";
}

void loadEntry(){
  Serial.println(F("**********loadEntry*********"));
  cnt = EEPROM.read(1023);
  Serial.print(F("cnt: "));
  Serial.println(cnt);
  Serial.print(F("memory: "));
  Serial.println(freeRam());
  int aa = 0; //EEPROM address to start reading from
  EntryObject entry;
  for(byte i =0; i < cnt; i++){
      EEPROM.get( aa, entry );
      aa += sizeof(entry);
      enlist[i] = entry;
      Serial.print(F("Read custom object from EEPROM: "));
      Serial.println(aa);
      Serial.println(enlist[i].relayID);
      Serial.println(enlist[i].start_hr);
      Serial.println(enlist[i].start_mn);
      Serial.println(enlist[i].start_se);
      Serial.println(enlist[i].end_hr);
      Serial.println(enlist[i].end_mn);
      Serial.println(enlist[i].end_se);
      for(byte y = 0; y <= 6; y++){
		Serial.print(y);
		Serial.print(F(": "));
        Serial.println(enlist[i].week[y]);
      }
	  for(byte z = 0; z <= 11; z++){
		Serial.print(z);
		Serial.print(F(": "));
        Serial.println(enlist[i].month[z]);
      }
  }

  boolean buttonState1 = digitalRead(b1);
  boolean buttonState2 = digitalRead(b2);
  boolean buttonState3 = digitalRead(b3);
  boolean buttonState4 = digitalRead(b4);

  Serial.print(F("button state 1 2 3 4: "));
  Serial.println(String(buttonState1) + ' '  +String(buttonState2)+' '+buttonState3 + ' ' +buttonState4);

  Serial.print(F("count: "));
  Serial.println(cnt);
  Serial.print(F("memory: "));
  Serial.println(freeRam());
  now = rtc.now();
  Serial.print(now.year(), DEC);
  Serial.print('/');
  Serial.print(now.month(), DEC);
  Serial.print('/');
  Serial.print(now.day(), DEC);
  Serial.print(' ');
  Serial.print(now.hour(), DEC);
  Serial.print(':');
  Serial.print(now.minute(), DEC);
  Serial.print(':');
  Serial.print(now.second(), DEC);
  Serial.println();
  Serial.println(F("**********End of loadEntry*********"));
}
